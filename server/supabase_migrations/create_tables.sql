-- Create video_processing table
CREATE TABLE video_processing (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(100) NOT NULL DEFAULT 'anonymous',
    youtube_url TEXT NOT NULL,
    original_video_path VARCHAR(512),
    final_video_path VARCHAR(512),
    cloudinary_url TEXT,
    cloudinary_public_id VARCHAR(255),
    num_shorts INTEGER NOT NULL DEFAULT 1,
    cloudinary_urls_json TEXT,
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    error_message TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    add_captions BOOLEAN DEFAULT TRUE
);

-- Create language_dubbing table
CREATE TABLE language_dubbing (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(100) NOT NULL DEFAULT 'anonymous',
    video_url TEXT NOT NULL,
    source_language VARCHAR(50) NOT NULL DEFAULT 'English',
    target_language VARCHAR(50) NOT NULL DEFAULT 'Hindi',
    voice VARCHAR(20) NOT NULL DEFAULT 'alloy',
    original_video_path VARCHAR(512),
    dubbed_video_path VARCHAR(512),
    cloudinary_url TEXT,
    cloudinary_public_id VARCHAR(255),
    cloudinary_urls_json TEXT,
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    error_message TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    add_captions BOOLEAN DEFAULT TRUE
);

-- Create indexes for faster queries
CREATE INDEX idx_video_processing_username ON video_processing(username);
CREATE INDEX idx_video_processing_status ON video_processing(status);
CREATE INDEX idx_language_dubbing_username ON language_dubbing(username);
CREATE INDEX idx_language_dubbing_status ON language_dubbing(status);

-- Add RLS (Row Level Security) policies
ALTER TABLE video_processing ENABLE ROW LEVEL SECURITY;
ALTER TABLE language_dubbing ENABLE ROW LEVEL SECURITY;

-- Create policies that allow anyone to read but only the authenticated user to write their own data
CREATE POLICY "Allow read access to all" 
ON video_processing FOR SELECT USING (true);

CREATE POLICY "Allow insert for authenticated users" 
ON video_processing FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow update for record owners" 
ON video_processing FOR UPDATE USING (auth.uid()::text = username);

CREATE POLICY "Allow read access to all" 
ON language_dubbing FOR SELECT USING (true);

CREATE POLICY "Allow insert for authenticated users" 
ON language_dubbing FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow update for record owners" 
ON language_dubbing FOR UPDATE USING (auth.uid()::text = username);

-- Create update_timestamp function
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for automatically updating timestamp
CREATE TRIGGER set_timestamp_video_processing
BEFORE UPDATE ON video_processing
FOR EACH ROW
EXECUTE PROCEDURE update_timestamp();

CREATE TRIGGER set_timestamp_language_dubbing
BEFORE UPDATE ON language_dubbing
FOR EACH ROW
EXECUTE PROCEDURE update_timestamp(); 